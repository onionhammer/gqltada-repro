"""
The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response.
"""
directive @cost(
  """
  The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc.
  """
  weight: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Query {
  """A simple hello world query"""
  hello(name: String): String!

  """A simple ping query"""
  ping: String!

  """A problematic query that throws an exception"""
  problematic: String!
}

type Mutation {
  """A simple hello world mutation"""
  hello(input: HelloInput!): HelloPayload!

  """Upload an image"""
  addImage(input: AddImageInput!): AddImagePayload!
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

input HelloInput {
  name: String
}

type HelloPayload {
  string: String
}

input AddImageInput {
  images: [Upload!]!
}

type AddImagePayload {
  long: Long
}